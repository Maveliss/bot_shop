from aiogram import types, executor
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from logging import basicConfig, INFO
from data.config import ADMINS
from loader import dp, bot, db
import handlers
from aiogram.types import Message

user_message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
admin_message = '–ê–¥–º–∏–Ω'

@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(user_message, admin_message)
    await message.answer('''–ü—Ä–∏–≤–µ—Ç! üëã
    ü§ñ —è –±–æ—Ç –£–æ–ª—Ç–µ—Ä, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã.
    üõçÔ∏è –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã, 
    –¥–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /menu.
    ‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –ö–æ–º–∞–Ω–¥–∞ /help –ø–æ–º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è 
    —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç''', reply_markup=markup)

@dp.message_handler(commands='help')
async def cmd_help(message: Message):
    await message.answer('–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')


@dp.message_handler(text = admin_message)
async def admin_mode(message: types.Message):
    cid = message.chat.id
    if cid not in ADMINS:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', reply_markup=ReplyKeyboardRemove())
        # ADMINS.append(cid)
    else:
        await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=ReplyKeyboardRemove())

@dp.message_handler(text = user_message)
async  def user_mode(message: types.Message):
    cid = message.chat.id
    if cid in ADMINS:
        ADMINS.remove(cid)
    await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=ReplyKeyboardRemove())




async def on_startup(dp):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    basicConfig(level=INFO)
    db.create_tables()


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=False)


